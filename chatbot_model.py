# -*- coding: utf-8 -*-
"""chatbot-model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-4sd8H7VvUkRlVXqyrrFVgshc-WDwQB3

This notebook is pre trained model for creating chatbot with good accuracy for this dataset. However, Accuracy range will be different.

You can add dataset with .csv file. But, you need to transfer your data json file into csv file format using python script. I tried it but don't seem to have converted successfully.

## **Import and load the data file**

We import the necessary packages for our chatbot and initialize the variables we will use in our Python project.
The data file is in JSON format so we used the json package to parse the JSON file into Python.
"""

import nltk #Natural Language Toolkit
nltk.download('punkt')#Sentence tokenizer

import nltk
from nltk.stem import WordNetLemmatizer
lemmatizer = WordNetLemmatizer()
import json
import pickle
import warnings
warnings.filterwarnings('ignore')

import numpy as np
import tensorflow as tf
from keras.models import Sequential
from keras.layers import Dense, Activation, Dropout
from tensorflow.keras.optimizers import SGD
import random

"""# **Preprocessing**"""

words=[]
classes = []
documents = []
ignore_words = ['?', '!']
data_file = open('/content/intents.json').read() # read json file
# data_file = open('/kaggle/input/chatbot/chatbot.json').read()
intents = json.loads(data_file) # load json file

"""When working with text data, we need to perform various preprocessing on the data before we make a machine learning or a deep learning model. Based on the requirements we need to apply various operations to preprocess the
data.
- Tokenizing is the most basic and first thing you can do on text data.
- Tokenizing is the process of breaking the whole text into small parts like words.
- Here we iterate through the patterns and tokenize the sentence using nltk.word_tokenize() function and append each word in the words list. We also create a list of classes for our tags.
"""

for intent in intents['intents']:
    for pattern in intent['patterns']:
        #tokenize each word
        w = nltk.word_tokenize(pattern)
        words.extend(w)# add each elements into list
        #combination between patterns and intents
        documents.append((w, intent['tag']))#add single element into end of list
        # add to tag in our classes list
        if intent['tag'] not in classes:
            classes.append(intent['tag'])

nltk.download('wordnet') #lexical database for the English language

nltk.download('omw-1.4')
nltk.download('omw') # download the Open Multilingual Wordnet data

"""Now we will lemmatize each word and remove duplicate words from the list.
- Lemmatizing is the process of converting a word into its lemma form and then creating a pickle file to store the Python objects which we will use while predicting.
"""

import spacy

# Load the English language model
nlp = spacy.load("en_core_web_sm")

# Lemmatize words
documents_lemmatized = []
for doc_tuple in documents:
    # Extract the text from the tuple
    doc_text = doc_tuple[0]

    # Check if doc_text is a list
    if isinstance(doc_text, list):
        # Join the list elements into a string
        doc_text = " ".join(doc_text)

    # Process the document through spaCy
    doc_spacy = nlp(doc_text)

    # Lemmatize tokens and filter out stop words and punctuation
    lemmatized_tokens = [token.lemma_ for token in doc_spacy if not token.is_stop and not token.is_punct]

    # Join lemmatized tokens back into a string
    lemmatized_doc = " ".join(lemmatized_tokens)

    documents_lemmatized.append(lemmatized_doc)

# Extract unique words from lemmatized documents
words = set([word for doc in documents_lemmatized for word in doc.split() if word not in ignore_words])

# Convert words to a sorted list
words = sorted(list(words))

# Sort classes
classes = sorted(list(set(classes)))

# Save Processed Words and Classes to Pickle Files
pickle.dump(words, open('words.pkl', 'wb'))
pickle.dump(classes, open('classes.pkl', 'wb'))

# Print or use the processed words and classes as needed
print(len(documents_lemmatized), "lemmatized documents\n", documents_lemmatized, "\n")
print(len(classes), "classes\n", classes, "\n")
print(len(words), "unique lemmatized words\n", words, "\n")

"""# **Training Model**

Now, we will create the training data in which we will provide the input and the output.
- Our input will be the pattern and output will be the class our input pattern belongs to. But the computer doesnâ€™t understand text so we will convert text into numbers
"""

import spacy
import random

nlp = spacy.load("en_core_web_sm")

# create our training data
training = []
# create an empty array for our output
output_empty = [0] * len(classes)
# training set, bag of words for each sentence
for doc in documents:
    # initialize our bag of words
    bag = []
    # list of tokenized words
    pattern_words = doc[0]
    # process the document through spaCy for lemmatization
    doc_spacy = nlp(" ".join(pattern_words))
    # lemmatize tokens and filter out stop words and punctuation
    lemmatized_tokens = [token.lemma_ for token in doc_spacy if not token.is_stop and not token.is_punct]
    # create bag of words array, if word match found in the current pattern then put 1 otherwise 0.[row * colm(263)]
    for w in words:
        bag.append(1) if w in lemmatized_tokens else bag.append(0)

    # in the output array, 0 value for each tag and 1 value for the matched tag.[row * colm(8)]
    output_row = list(output_empty)
    output_row[classes.index(doc[1])] = 1

    training.append([bag, output_row])

# shuffle training
random.shuffle(training)

# split training into X and Y
train_x = [item[0] for item in training]
train_y = [item[1] for item in training]

print("Training data created")

# To build a new TensorFlow graph.
from tensorflow.python.framework import ops
ops.reset_default_graph()

"""# **Build the model**

We have our training data ready, now we will build a deep neural network that has 3 layers. We use the Keras sequential API for this. After training the model for 200 epochs, we achieved 100% accuracy on our model. Let us save the model as â€˜chatbot_model.h5'.
"""

# Create model - 3 layers. First layer 128 neurons, second layer 64 neurons and 3rd output layer contains number of neurons
# equal to number of intents to predict output intent with softmax
model = Sequential()
model.add(Dense(128, input_shape=(len(train_x[0]),), activation='relu'))
model.add(Dropout(0.5)) #to prevent overfitting.
model.add(Dense(64, activation='relu'))
model.add(Dropout(0.5)) #to prevent overfitting.
#number of neurons equal to the number of intents in training data
model.add(Dense(len(train_y[0]), activation='softmax'))
print("First layer:",model.layers[0].get_weights()[0])

# Compile model. Stochastic gradient descent with Nesterov accelerated gradient gives good results for this model
# sgd = SGD(lr=0.01, decay=1e-6, momentum=0.9, nesterov=True)
model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])

#fitting and saving the model
hist = model.fit(np.array(train_x), np.array(train_y), epochs=200, batch_size=5, verbose=1)
model.save('chatbot_model.h5', hist)

print("model created")

"""# FOR PREDICTING RESPONSE
### **You have to add or run this below script by loading model**
"""

from keras.models import load_model

model = load_model('chatbot_model.h5')

### **For loading saved model**


intents = json.loads(open('/content/intents.json').read())

words = pickle.load(open('words.pkl','rb'))

classes = pickle.load(open('classes.pkl','rb'))



#Utility Methods

def clean_up_sentence(sentence):
    # tokenize the pattern - split words into array

    sentence_words = nltk.word_tokenize(sentence)
    #print(sentence_words)
    # stem each word - create short form for word

    sentence_words = [lemmatizer.lemmatize(word.lower()) for word in sentence_words]
    #print(sentence_words)

    return sentence_words
#return bag of words array: 0 or 1 for each word in the bag that exists in the sentence

def bow(sentence, words, show_details=True):
    # tokenize the pattern

    sentence_words = clean_up_sentence(sentence)
    #print(sentence_words)

    # bag of words - matrix of N words, vocabulary matrix

    bag = [0]*len(words)
    #print(bag)

    for s in sentence_words:
        for i,w in enumerate(words):
            if w == s:
                # assign 1 if current word is in the vocabulary position
                bag[i] = 1
                if show_details:
                    print ("found in bag: %s" % w)
                #print ("found in bag: %s" % w)
    #print(bag)
    return(np.array(bag))

def predict_class(sentence, model):
    # filter out predictions below a threshold

    p = bow(sentence, words,show_details=False)
    #print(p)

    res = model.predict(np.array([p]))[0]
    #print(res)

    ERROR_THRESHOLD = 0.25

    results = [[i,r] for i,r in enumerate(res) if r>ERROR_THRESHOLD]
    #print(results)
    # sort by strength of probability

    results.sort(key=lambda x: x[1], reverse=True)
    #print(results)

    return_list = []

    for r in results:
        return_list.append({"intent": classes[r[0]], "probability": str(r[1])})

    return return_list
    #print(return_list)



def getResponse(ints, intents_json):

    tag = ints[0]['intent']
    #print(tag)

    list_of_intents = intents_json['intents']
    #print(list_of_intents)

    for i in list_of_intents:
        if(i['tag']== tag):
            result = random.choice(i['responses'])
            break
    return result

def chatbot_response(text):
    ints = predict_class(text, model)
    #print(ints)

    res = getResponse(ints, intents)
    #print(res)
    return res


start = True

while start:

    query = input('Enter Message:')
    if query in ['quit','exit','bye']:
        start = False
        continue
    try:
        res = chatbot_response(query)
        print(res)
    except:
        print('You may need to rephrase your question.')